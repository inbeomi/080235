#
# 아이템 12
#
x = ['빨강', '주황', '노랑', '녹색', '파랑', '자주']
odds = x[::2] # 일정한 간격을 두고 슬라이싱을 할 수 있는 특별한 구문. 이를 스트라이드(stride)라고 한다.
evens = x[1::2]
print(odds)
print(evens)

x = b'mongoose'
y = x[::-1]
print(y)

x = '寿司'
y = x[::-1]
print(y)

w = '寿司'
x = w.encode('utf-8')
y = x[::-1]
# 오류가 나는 부분. 오류를 보고 싶으면 커멘트를 해제할것
#z = y.decode('utf-8')

# 유니코드 데이터에서는 -1을 증가값으로 사용해 문자열을 슬라이싱하는 게 잘 되는데, UTF-8로 인코딩한 데이터에서는 안된다.
# 단, UTF-8 인코딩 바이트가 1바이트인 경우에는 정상 작동한다. 2바이트 이상이면 문자들이 깨지게 된다. 
w = 'abcZYX123'
x = w.encode('utf-8')
y = x[::-1]
z = y.decode('utf-8')
print(z)

x = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
x[::2] # ['a', 'c', 'e', 'g'] # '시작부터' 매 두 번째 원소
x[::-2] # ['h', 'f', 'd', 'b'] # '끝부터' 앞으로 가면서 매 두 번째 원소

x[2::2]    # ['c', 'e', 'g']
x[-2::-2]  # ['g', 'e', 'c', 'a']
x[-2:2:-2] # ['g', 'e']
x[2:2:-2]  # []

# stride 구문을 사용해야 한다면, 스트라이딩한 결과를 변수에 대입한 다음 슬라이싱하는 것을 권장한다. 
# 이 과정에서, 메모리를 감당할 수 없다면 itertools 내장 모듈의 islice 메서드를 고려하자. (참고: https://wikidocs.net/16070)
y = x[::2] # ['a', 'c', 'e', 'g']
z = y[1:-1] # ['c', 'e']
